import org.apache.tools.ant.filters.ReplaceTokens
import org.eu.awesomekalin.jta.mod.BuildTools

plugins {
    id "fabric-loom" version "+"
}
repositories {
    mavenCentral()
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven { url = 'https://maven.maxhenkel.de/repository/public' }

}

final BuildTools buildTools = new BuildTools(minecraftVersion, "fabric", project)

loom {
    runConfigs.configureEach { ideConfigGenerated = true }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings "net.fabricmc:yarn:${buildTools.getYarnVersion()}:v2"
    modImplementation "net.fabricmc:fabric-loader:${buildTools.getFabricVersion()}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${buildTools.getFabricApiVersion()}"
    modImplementation "org.mtr:MTR-fabric:${mtrVersion}+${minecraftVersion}-server"
    modImplementation("software.bernie.geckolib:geckolib-fabric-${minecraftVersion}:${buildTools.getGeckolibVersion()}")
    modApi "de.maxhenkel.voicechat:voicechat-api:${buildTools.getVoiceChatVersion()}"


    modApi files('libs/trinkets-3.7.2.jar')
    modApi files('libs/cardinal-components-base-5.2.0.jar')
    modApi files('libs/cardinal-components-entity-5.2.0.jar')
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(buildTools.javaLanguageVersion))
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.register("setupFiles") {
    copy {
        outputs.upToDateWhen { false }
        from "src/main/fabric.mod.template.json"
        into "src/main/resources"
        filter(ReplaceTokens, tokens: ["minecraft": minecraftVersion, "version": version])
        rename "(.+).template.json", "\$1.json"
    }
}

tasks.register("setupPotato") {
    delete fileTree("src/main/resources/assets/jta/textures")

    copy {
        outputs.upToDateWhen { true }
        from "../potatoTex/jta"
        into "src/main/resources/assets/jta/textures"
    }
	
	delete fileTree("src/main/resources/assets/mtr")

    copy {
        outputs.upToDateWhen { true }
        from "../potatoTex/mtr"
        into "src/main/resources/assets/mtr"
    }
	
	delete fileTree("src/main/resources/assets/mtrsteamloco")

    copy {
        outputs.upToDateWhen { true }
        from "../potatoTex/mtrsteamloco"
        into "src/main/resources/assets/mtrsteamloco"
    }
}

build {
    doLast {
        buildTools.copyBuildFile()
    }
}
