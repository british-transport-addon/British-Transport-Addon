import org.apache.tools.ant.filters.ReplaceTokens
import org.eu.awesomekalin.jta.mod.BuildTools

plugins {
    id "fabric-loom" version "+"
}
repositories {
    mavenCentral()
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven { url = 'https://maven.maxhenkel.de/repository/public' }

}

final BuildTools buildTools = new BuildTools(minecraftVersion, "fabric", project)

loom {
    runConfigs.configureEach { ideConfigGenerated = true }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings "net.fabricmc:yarn:${buildTools.getYarnVersion()}:v2"
    modImplementation "net.fabricmc:fabric-loader:${buildTools.getFabricVersion()}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${buildTools.getFabricApiVersion()}"
    modImplementation "org.mtr:MTR-fabric:${mtrVersion}+${minecraftVersion}-server"
    modImplementation("software.bernie.geckolib:geckolib-fabric-${buildTools.getGeckolibVersion()}")

    modApi files('libs/cardinal-components-base-5.2.0.jar')
    modApi files('libs/cardinal-components-entity-5.2.0.jar')
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(buildTools.javaLanguageVersion))
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.register("setupFiles") {
    if (!minecraftVersion.trim().equalsIgnoreCase('1.16.5') && !minecraftVersion.trim().equalsIgnoreCase('1.17.1') && !minecraftVersion.trim().equalsIgnoreCase('1.18.2') && !minecraftVersion.trim().equalsIgnoreCase('1.19.2')) {
        copy {
            outputs.upToDateWhen { false }
            from "src/main/fabric.mod.template.json"
            into "src/main/resources"
            filter(ReplaceTokens, tokens: ["minecraft": minecraftVersion, "version": version, "geckolib": ""])
            rename "(.+).template.json", "\$1.json"
        }
    } else {
        copy {
            outputs.upToDateWhen { false }
            from "src/main/fabric.mod.template.json"
            into "src/main/resources"
            filter(ReplaceTokens, tokens: ["minecraft": minecraftVersion, "version": version, "geckolib": "3"])
            rename "(.+).template.json", "\$1.json"
        }
    }

    if (!minecraftVersion.trim().equalsIgnoreCase('1.20.4') && !minecraftVersion.trim().equalsIgnoreCase('1.20.1') && !minecraftVersion.trim().equalsIgnoreCase('1.19.4')) {
        delete fileTree("src/main/java/org/eu/awesomekalin/jta/mod/entity/block/road")
        delete fileTree("src/main/java/org/eu/awesomekalin/jta/mod/entity/block/street")
        delete fileTree("src/main/java/org/eu/awesomekalin/jta/platform/client/model")
        delete fileTree("src/main/java/org/eu/awesomekalin/jta/platform/render")

        copy {
            outputs.upToDateWhen { false }
            from "../geckolib3/org/eu/awesomekalin/jta/mod/entity/block/road"
            into "src/main/java/org/eu/awesomekalin/jta/mod/entity/block/road"
        }

        copy {
            outputs.upToDateWhen { false }
            from "../geckolib3/org/eu/awesomekalin/jta/mod/entity/block/street"
            into "src/main/java/org/eu/awesomekalin/jta/mod/entity/block/street"
        }

        copy {
            outputs.upToDateWhen { false }
            from "../geckolib3/org/eu/awesomekalin/jta/platform-fabric/client/model"
            into "src/main/java/org/eu/awesomekalin/jta/platform/client/model"
        }

        copy {
            outputs.upToDateWhen { false }
            from "../geckolib3/org/eu/awesomekalin/jta/platform-fabric/render"
            into "src/main/java/org/eu/awesomekalin/jta/platform/render"
        }
    }

    if (minecraftVersion.trim().equalsIgnoreCase("1.18.2") || minecraftVersion.trim().equalsIgnoreCase("1.17.1") || minecraftVersion.trim().equalsIgnoreCase("1.16.5")) {
        delete fileTree("src/main/java/org/eu/awesomekalin/jta/platform/client/model")

        copy {
            outputs.upToDateWhen { false }
            from "../pre-1.19/fabric/client/model"
            into "src/main/java/org/eu/awesomekalin/jta/platform/client/model"
        }
    }
}

tasks.register("setupPotato") {
    delete fileTree("src/main/resources/assets/jta/textures")

    copy {
        outputs.upToDateWhen { true }
        from "../potatoTex/jta"
        into "src/main/resources/assets/jta/textures"
    }
	
	delete fileTree("src/main/resources/assets/mtr")

    copy {
        outputs.upToDateWhen { true }
        from "../potatoTex/mtr"
        into "src/main/resources/assets/mtr"
    }
	
	delete fileTree("src/main/resources/assets/mtrsteamloco/rails")

    copy {
        outputs.upToDateWhen { true }
        from "../potatoTex/mtrsteamloco"
        into "src/main/resources/assets/mtrsteamloco/rails"
    }
}

build {
    doLast {
        buildTools.copyBuildFile()
    }
}
